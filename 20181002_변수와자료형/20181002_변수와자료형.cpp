#include <stdio.h>



int main()
{
	//컴퓨터의 기능과 C언어 문법 사이 관계!
	//1. 메모리 접근 (변수&자료형)
	//2. 연산 (수식&연산자)
	//3. 순서제어 (조건문&반복문)

	//변수는 C에서 컴퓨터의 기능인 메모리 접근과 관한 문법이다.
	//======이 위는 당분간 무시
	//변수 선언문 (자료형 변수이름): 1. 변수의 이름 소개 2. 변수의 자료형 지정
	//int ==> 자료형, a ==> 변수이름
	//변수: 메모리 저장장소의 이름
	//자료형: 변수가 가질 수 있는 값의 범위를 지정
	//C언어에서는 변수를 사용하기 전에 반드시 변수선언을 해야 한다.
	//문장: ;으로 끝난다. ;로 끝나는 것이 하나의 문장이다.
	int a;//변수 선언문: 1. a는 변수의 이름이다. 2. 변수 a의 자료형은 int이다.
	float ff;//소수점 숫자(실수) 표현

	//대입문: 우변의 "값"을 좌변의 저장장소로 이동(저장)한다.
	//리터럴(literal): 소스코드에서 특정한 자료형의 값을 직접 표현하는 방법
	//예) 정수형: 10, 0xF3; 실수형: 3.14, 10f, 0.1E-5; 문자형: 'a', \n; 문자열: "Hello World"
	a = 10;
	//C에서 대입연산자 =(이동한다, 옮긴다.)는 수학에서의 =(같다.)과 전혀 달라.

	int b = 20, c; //변수 선언 + 변수 초기화
	//변수를 여러개 선언하고 싶을 때 , (comma)

	//수식(expression): 연산자와 피연산자들의 조합. 모든 수식은 반드시 값을 반환(리턴)한다.
	//수식은 컴퓨터의 기능 중 연산을 위한 c문법이다.
	c = (a + b);
	//a, b: 피연산자(operand) +: 연산자(operator)(연산을 수행하는 기호)
	//%:나머지 연산자, /:나누기 연산자.

	//대입연산자
	a = b = c = 100;
	//이 문장이 정확히 어떻게 실행되는 것일까??
	//대입연산자의 연산 순서 오른쪽에서 왼쪽으로 (<-)
	//1. c = 100 연산 -> 하는 행동 1. 우변의 값(100) 리턴 2. 우변의 값(100)을 좌변의 변수 c에 저장
	//2. b = 100 연산 -> 하는 행동 1. 우변의 값(100) 리턴 2. 우변의 값(100)을 좌변의 변수 b에 저장
	//3. a = 100 연산 -> 하는 행동 1. 우변의 값(100) 리턴 2. 우변의 값(100)을 좌변의 변수 a에 저장
	//마지막에 리턴된 100은 더이상 할 짓이 없으니까 사라져.

	//모든 수식은 값을 반환하는데, 이 반환하는 행동 외에 발생하는 행동을 "부수효과"라고 한다.
	//모든 수식은 값을 무조건 반환하고, 부수효과는 있을수도 있고 없을수도 있어.
	//대입 연산자의 경우 부수효과가 우변의 값을 좌변의 저장소에 저장하는 것이다.

	//증감연산자
	b = 10;
	a = b++;
	//b++: 반환값 ==> b, 부수효과 ==> b=b+1
	//b++가 b(10)을 반환하고, 그 후에 부수효과로 b를 11로 만들어준다.
	//반환된 값이 10이었으므로 a에 10이 저장된다.
	//문장이 끝나면 최종적으로 a -> 10, b -> 11
	b = 10;
	a = ++b;
	//++b: 반환값 ==> b+1, 부수효과 ==> b=b+1
	//따라서 b에 1이 더해진 11이 리턴되므로 a값이 11이 된다.
	//문장이 끝나면 최종적으로 a -> 11, b -> 11

	//--의 경우도 위와 마찬가지이다.
	//모든 수식을 반환값과 부수효과로 나눠서 생각하면 매우 편리하다.

	//관계연산자: < > <= >= == !=
	a = 10; b = 20;
	c = a < b;//연산 결과 참이면 1 리턴: c -> 1
	c = a > b;//연산 결과 거짓이면 0 리턴: c -> 0

	//논리연산자: &&(AND) ||(OR) !(NOT)
	//C언어에서는 true/false literal이 없다. boolean 자료형도 없다.
	//논리식의 결과가 참이면 1 거짓이면 0
	//C언어에서 논리연산자의 피연산자가 0이면 거짓, 0이 아니면 무조건 (-1같은 것도)참으로 처리한다.
	a = 1 && 0; //a -> 0 (false)
	a = 1 || 0; //a -> 1 (true)
	a = 100 || 0; //a가 0이 아니므로 참으로 처리. a -> 1
	//c에서 0은 무조건 false, 1이면 무조건 true

	//연산자 우선순위(operator precedence)
	a = 10 + 20 * 3;//원래 알던대로 하면 OK!
	a = 1 || 3 * 4 > 10;//연산자 우선순위 table에 따르면,,
	//순서
	//1. 산술 연산자 *
	//2. 관계 연산자 >
	//3. 논리 연산자 ||
	//4. 대입 연산자 =
	//결과 a -> 1

	a = (1 || ((3 * 4) > 10));


	//연산자 결합 방향(Associativity)
	a = 10 + 20 + 30;
	//산술연산자인 +는 L->R 순서 이므로
	//1. 10 + 20 -> 30
	//2. 30 + 30 -> 60

	//대부분은 L->R이지만 예외(R->L) 존재
	//1. 단항연산자 (++, --, sizeof(type))
	//2. 대입연산자

	//C언어에서는 무조건 위에서 아래 순서이다.
	//이 순서를 바꿀 수 있는 방법은? 조건문 & 반복문

	//조건문(Conditional Statement)
	a = 10;
	//조건문 시작
	if (a == 10) {	// 괄호()내부를 조건식이라고 한다.
		//조건이 참일 때 중괄호{} 내부(하나의 문장)를 실행하라
		printf("a is ten\n");//조건이 참일 때 수행
		printf("is this a real life\n");
		//중괄호 {} 안에 여러 문장을 묶어서 넣을 수 있음
		//논리적으로 중괄호 {}도 하나의 문장이다. -> 복합문
	}
	else {
		printf("a is not ten\n");//조건이 거짓일 때 수행
	}
	//조건문 끝
	//조건문은 내부가 얼마나 복잡하건 시작부터 끝까지가 "하나의 문장"이다
	//printf는 조건문과 관계 없는 문장이므로, 조건문이 다 끝나면 아래 문장이 무조건 수행된다

	if (a == 10) {//a가 10인지 확인. 참이면 여기 문장 실행하고 바로 밖으로 나감
		printf("a is ten\n");
	}
	else if (a == 20) {//a가 10이 아니면 20인지 확인. 참이면 여기 문장 실행하고 나감
		printf("a is twenty\n");
	}
	else {//a가 10도 아니고 20도 아니면 무조건 이 문장이 실행하고 나감
		printf("a is not ten\n");
	}

	//원래 if의 가장 기본
	if (a == 10)
		printf("a is ten\n");

	//키보드에서 입력받는 방법
	printf("정수를 입력하시오. : ");
	scanf_s("%d", &a);
	printf("입력받은 a = %d\n", a);


	printf("program end!!!!!!!!!!!\n");

	//printf("a = %d\n", a);
	//%d: ,뒤의 변수를 decimal(10진수)로 표시하여라.

	//======이 아래도 당분간 무시
}